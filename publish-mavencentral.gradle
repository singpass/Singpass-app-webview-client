apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}
artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            if (project.plugins.findPlugin("com.android.library")) {

                File aar = project.rootProject.file("$buildDir/outputs/aar/${aarName}.aar")
                if(aar.exists()) {
                    artifact("$buildDir/outputs/aar/${aarName}.aar")
                }
                else {
                    artifact("$buildDir/outputs/aar/$aarName-stg.aar")
                }

            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }

            artifact androidSourcesJar
//            artifact javadocJar

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'SingpassWebViewClient is an extension of androidx.webViewClientCompat that handles opening of Singpass app upon clicking on a supported url.'
                url = 'https://github.com/singpass/Singpass-app-webview-client'
                licenses {
                    license {
                        name = 'License'
                        url = 'https://github.com/GetStream/stream-chat-android/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'kenneth-leong-gt'
                        name = 'Kenneth leong'
                        email = 'kenneth_leong@tech.gov.sg'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/singpass/Singpass-app-webview-client.git'
                    developerConnection = 'scm:git:ssh://github.com/singpass/Singpass-app-webview-client.git'
                    url = 'https://github.com/singpass/Singpass-app-webview-client'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}